import numpy as np
import itertools
print("Welcome to the task!")
def random_matrix(dim):
    """
    The function generates dim x dim array of integers
    between 0 and 10.
    """
    matrix = np.random.randint(10, size = (dim, dim))
    return matrix

def permutations(size):
    """
    Generates a list of all permutations of indices for a given size.
    """
    return list(itertools.permutations(range(size)))

def product(matrix, permutation):
    """
    Computes the product of elements in the matrix for the given permutation
    considering the sign based on the number of inversions in the permutation.
    """
    product = 1
    sign = 1
    for i in range (len(permutation)):
        product *= matrix [i][permutation[i]]
    for i in range (len(permutation)):
        for j in range(i+1, len(permutation)):
            if permutation[i] > permutation[j]:
                sign *= -1
    return product*sign

def determinant(matrix):
    """
    Computes the determinant of the matrix using the permutation rule.
    """
    size = len(matrix)
    perm_list = permutations(size)
    det = sum(product(matrix, perm) for perm in perm_list )
    return det


try:
    dim = int(input("Enter any positive number(size): "))
    if dim <1:
        print("Enter positive number!")
    else:
        matrix = random_matrix(dim)
        print("Generated matrix:\n", matrix)
        det = determinant(matrix)
        print("Determinant is calculated according to the permutatuion rule", det)

        det_np = round(np.linalg.det(matrix))
        print("Determinant generated by np.linalg.det:", det_np)
except ValueError:
    print("Only numbers can be entered")